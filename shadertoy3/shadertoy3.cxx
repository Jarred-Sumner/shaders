#if __circle_build__ < 105
#error "Circle build 105 required to reliably compile this sample"
#endif

#include <imgui.h>
#include <backends/imgui_impl_glfw.h>
#include <backends/imgui_impl_opengl3.h>

#define GL_GLEXT_PROTOTYPES
#include <gl3w/GL/gl3w.h>
#include <GLFW/glfw3.h>
#include <cstdio>
#include <cstdlib>
#include <complex>
#include <memory>
#include <vector>
#include <atomic>
#include <thread>
#include <csignal>

// Interlacing
#include "adam7.hxx"

namespace imgui {
  // imgui attribute tags.
  using color3   [[attribute]] = void;
  using color4   [[attribute]] = void;
  
  template<typename type_t>
  struct minmax_t {
    type_t min, max;
  };
  using range_float [[attribute]] = minmax_t<float>;
  using range_int   [[attribute]] = minmax_t<int>;

  // Resolution for drag.
  using drag_float [[attribute]] = float;

  using title    [[attribute]] = const char*;
  using url      [[attribute]] = const char*;
}

// Return true if any option has changed.
template<typename options_t>
bool render_imgui(options_t& options, const char* child_name = nullptr) {

  bool changed = false;
  if(!child_name || 
    ImGui::TreeNodeEx(child_name, ImGuiTreeNodeFlags_DefaultOpen)) {

    using namespace imgui;
    if constexpr(@has_attribute(options_t, url))
      ImGui::Text(@attribute(options_t, url));

    @meta for(int i = 0; i < @member_count(options_t); ++i) {{
      typedef @member_type(options_t, i) type_t;
      const char* name = @member_name(options_t, i);
      auto& value = @member_value(options, i);

      if constexpr(@member_has_attribute(options_t, i, color4)) {
        static_assert(std::is_same_v<type_t, vec4>);
        changed |= ImGui::ColorEdit4(name, &value.x);

      } else if constexpr(@member_has_attribute(options_t, i, color3)) {
        static_assert(std::is_same_v<type_t, vec3>);
        changed |= ImGui::ColorEdit3(name, &value.x);

      } else if constexpr(@member_has_attribute(options_t, i, range_float)) {
        auto range = @member_attribute(options_t, i, range_float);

        if constexpr(std::is_same_v<type_t, vec4>) {
          changed |= ImGui::SliderFloat4(name, &value.x, range.min, range.max);

        } else if constexpr(std::is_same_v<type_t, vec3>) {
          changed |= ImGui::SliderFloat3(name, &value.x, range.min, range.max);

        } else if constexpr(std::is_same_v<type_t, vec2>) {
          changed |= ImGui::SliderFloat2(name, &value.x, range.min, range.max);

        } else {
          static_assert(std::is_same_v<type_t, float>);
          changed |= ImGui::SliderFloat(name, &value, range.min, range.max);
        }

      } else if constexpr(@member_has_attribute(options_t, i, drag_float)) {
        auto drag = @member_attribute(options_t, i, drag_float);

        if constexpr(std::is_same_v<type_t, vec4>) {
          changed |= ImGui::DragFloat4(name, &value.x, drag);

        } else if constexpr(std::is_same_v<type_t, vec3>) {
          changed |= ImGui::DragFloat3(name, &value.x, drag);

        } else if constexpr(std::is_same_v<type_t, vec2>) {
          changed |= ImGui::DragFloat2(name, &value.x, drag);

        } else {
          static_assert(std::is_same_v<type_t, float>);
          changed |= ImGui::DragFloat(name, &value, drag);
        }

      } else if constexpr(@member_has_attribute(options_t, i, range_int)) {
        auto range = @member_attribute(options_t, i, range_int);

        if constexpr(std::is_same_v<type_t, ivec4>) {
          changed |= ImGui::SliderInt4(name, &value.x, range.min, range.max);

        } else if constexpr(std::is_same_v<type_t, ivec3>) {
          changed |= ImGui::SliderInt3(name, &value.x, range.min, range.max);

        } else if constexpr(std::is_same_v<type_t, ivec2>) {
          changed |= ImGui::SliderInt2(name, &value.x, range.min, range.max);

        } else {
          static_assert(std::is_same_v<type_t, int>);
          changed |= ImGui::SliderInt(name, &value, range.min, range.max);
        }

      } else if constexpr(std::is_same_v<type_t, bool>) {
        changed |= ImGui::Checkbox(name, &value);

      } else if constexpr(std::is_same_v<type_t, vec4>) {
        changed |= ImGui::DragFloat4(name, &value.x, .01f);

      } else if constexpr(std::is_same_v<type_t, vec3>) {
        changed |= ImGui::DragFloat3(name, &value.x, .01f);

      } else if constexpr(std::is_same_v<type_t, vec2>) {
        changed |= ImGui::DragFloat2(name, &value.x, .01f);
        
      } else if constexpr(std::is_same_v<type_t, float>) {
        changed |= ImGui::DragFloat(name, &value, .01f);
    
      } else if constexpr(std::is_same_v<type_t, int>) {
        changed |= ImGui::DragInt(name, &value);

      } else if constexpr(std::is_class_v<type_t>) {
        // Iterate over each data member.
        changed |= render_imgui(value, name);

      } else if constexpr(std::is_array_v<type_t>) {
        int i = 0;
        for(auto& item : value) {
          std::string s = name + ("[" + std::to_string(i++) + "]");
          changed |= ImGui::DragFloat(s.c_str(), &item, .01f);
        }
      }
    }}

    if(child_name)
      ImGui::TreePop();
  }

  return changed;
}

////////////////////////////////////////////////////////////////////////////////

[[using spirv: in, location(0)]]
vec4 vertex_in;

[[spirv::vert]]
void vert_main() {
  glvert_Output.Position = vertex_in;
}

[[using spirv: out, location(0)]]
vec4 fragColor;

struct shadertoy_uniforms_t {
  // shader-specific parameters.
  vec4 mouse;            // .xy is current or last drag position.
                         // .zw is current or last click.
                         // .zw is negative if mouse button is up.
  vec2 resolution;       // width and height of viewport in pixels.
  float time;            // seconds since simulation started.
};

[[using spirv: uniform, binding(0)]]
shadertoy_uniforms_t uniforms;

template<typename shader_t>
[[using spirv: uniform, binding(1)]]
shader_t shader_ubo;

template<typename shader_t>
[[spirv::frag(lower_left)]]
void frag_main() {
  fragColor = shader_ubo<shader_t>.render(glfrag_FragCoord.xy, uniforms);
}

////////////////////////////////////////////////////////////////////////////////
constexpr float weights[] {
0.1028, 1.6673, 1.4198, -0.3303, -0.3514, 0.3852, 1.2728, 0.0222, 1.9401, -1.0903, 0.2250, 
-0.7970, 0.0080, -0.0123, -0.0033, 0.7314, -0.3248, -1.9151, 0.2630, -1.7573, -1.3383, -0.0020, 
-0.0015, 0.0052, -1.0466, 0.5547, 0.8525, -0.6951, -1.5900, 0.9958, -1.9402, 0.1746, 0.0532, 
-0.8347, -1.5226, 0.9124, -0.0014, -0.0004, 0.0014, -0.1210, 0.1571, 0.9184, -0.1586, -0.3184, 
-0.2862, -0.0026, -0.0021, -0.0110, -0.0003, -0.0026, 0.0087, 1.1592, -1.5602, 0.5586, 0.9330, 
-0.7047, 0.1727, 0.9648, 1.1793, -0.1516, 0.3526, -0.3139, 0.4080, 1.5673, 0.5157, -0.3350, 
-1.5944, 0.8795, -0.4067, -1.7084, -0.5785, -0.8153, 0.2055, -1.1105, -0.1587, 1.3749, 0.4110, 
-1.1008, 0.0028, -0.0009, 0.0012, 0.1590, -0.7882, 0.9825, -1.0313, -0.3224, -0.9920, 0.1336, 
0.2857, -0.4648, 0.0005, -0.0010, 0.0007, 1.2120, 0.8832, 1.3406, 0.2037, -0.9934, -0.1013, 
1.9876, -0.0311, 1.0910, 1.4144, -0.0172, 0.0383, -0.6151, 0.0747, 0.1972, -0.0219, 0.9227, 
-0.6424, -0.0347, 0.0025, 0.3911, 1.3110, 1.0343, 0.4547, 0.3814, -0.3754, -0.5237, 0.2852, 
0.2478, 0.0114, 0.3030, -0.7501, -1.3647, 0.0013, -0.0365, 0.3817, 0.2514, 1.4081, 0.5378, 
0.0503, 1.6461, 0.5127, 0.0306, -0.3719, -1.5634, -0.2897, 0.8626, 0.0213, -0.0374, -0.7606, 
0.0238, -0.0194, 1.2464, 0.2474, -1.1886, 0.1409, -0.6562, 1.5343, 0.3555, -0.0780, -0.1540, 
0.0222, 0.7055, -1.0881, 0.0873, 0.0006, 0.8332, -0.1404, 0.2851, 0.4923, 0.4213, -0.0087, 
0.6011, -0.9928, -0.0172, 0.3074, 0.3870, 1.3318, 0.2964, -0.0056, 0.2141, -0.1002, -0.0081, 
-0.0143, -0.0985, -1.3874, -0.8923, -1.0612, -0.2916, 0.7248, 1.4539, -0.3564, 0.6867, 0.0242, 
1.6232, 0.5841, -0.5504, 0.0059, 0.3762, -0.5952, -0.8804, 0.2201, 0.3750, 0.0023, -0.2354, 
-1.6843, -0.0005, 0.1014, 1.0131, 1.2806, -0.4663, -0.0161, -1.9120, 0.7502, -0.0447, 0.0063, 
0.6551, 0.7904, -0.3896, -0.3006, 0.0872, 0.7532, -0.2246, 1.3207, -0.5176, -0.0013, -0.5836, 
2.0141, 0.1730, 0.0092, -1.6107, -1.0937, 0.8592, 0.9688, -0.3333, -0.0002, -0.3962, 1.5307, 
0.0014, -0.4677, 0.9766, -0.2486, -1.1528, -0.0284, -0.1039, 0.5820, -0.0255, 0.0093, -0.0674, 
-2.1270, 0.0605, -0.4676, -1.6150, -0.9497, -0.1346, -0.8507, -0.7330, -0.0079, 0.0714, 0.9042, 
0.3284, 0.0205, -0.5179, 0.8930, -0.0594, 0.5634, -0.6677, -0.0236, 1.6660, 1.4573, -0.0043, 
0.4389, 1.4000, -1.2570, -0.6729, -0.0014, -0.3419, 0.1299, -0.0183, 0.0267, -0.4031, 0.3967, 
1.6200, -0.5863, 0.2568, 0.6680, -0.4042, 0.0511, 0.0509, -0.0203, -0.7441, 0.6488, 0.1622, 
-0.0121, -2.5653, -0.9385, 0.5555, 1.3995, 0.6823, -0.0182, 0.7926, 0.5731, -0.0199, -1.3147, 
1.5697, 1.0589, -1.4346, -0.0208, -0.5872, 0.4184, -0.0236, -0.0104, 0.5920, -0.3739, 1.0562, 
-0.1695, 0.7168, -0.1222, 1.2475, 0.1182, 1.8880, 0.0045, 0.4134, 0.1631, 0.3327, 0.0013, 
0.2165, 1.8016, -0.8695, -0.0612, -0.0868, -0.0187, 1.4634, -0.6077, 0.0268, 0.3631, 1.1662, 
-0.3248, -0.2189, 0.0065, -0.2241, -0.5289, -0.0076, -0.0265, 0.4976, 0.7993, 0.4770, -2.1075, 
0.0480, 0.7668, 1.0906, 2.0608, -1.1112, -0.0115, 0.0232, -1.0531, 0.1299, 0.0034, 0.6244, 
0.3119, -0.8879, -0.3340, 1.2381, 0.0119, 0.9355, 0.7072, 0.0065, -0.3339, -1.1527, -0.5357, 
-1.6152, 0.0048, -0.1846, -0.4670, 0.0142, -0.0103, 0.7438, -0.8238, 0.9325, -1.1223, 0.8473, 
-0.2862, 0.1433, 0.2211, 0.6259, -0.0016, -0.1737, 0.6370, 1.0181, -0.0076, 0.1137, 0.0257, 
-0.2435, 0.4916, -0.6622, -0.0122, 1.1284, 0.1538, -0.0188, -1.6081, 0.1971, -0.8243, 1.1445, 
-0.0195, -0.0862, 0.7766, 0.0278, -0.0177, -2.1064, 0.9050, -0.7993, 0.6642, 0.0200, -1.4298, 
-0.8543, 0.0843, -1.2796, 0.0050, -0.7540, -0.3004, 0.1340, -0.0052, 0.5084, 1.2636, -0.6925, 
0.4489, 0.1704, 0.0447, 0.1760, 0.8850, 0.0289, 0.9225, -0.8288, -2.6319, -0.3112, 0.0520, 
0.7215, 1.1524, -0.0012, -0.0950, -0.9662, -0.0557, -0.4436, -0.3644, 0.4808, 0.4563, 1.0721, 
0.7606, 0.5439, -0.0465, 0.2752, 2.2401, 0.0122, -0.0097, 0.5794, 0.8363, -0.5419, 0.7520, 
0.4836, 0.0238, -0.2551, -1.2332, -0.0031, 0.5303, -3.3239, 1.1512, -0.3344, -0.0142, -0.8050, 
-0.7677, -0.0268, 0.0123, 2.1208, 1.2948, -0.6279, 0.9257, 0.7650, 0.6576, -0.4323, 0.1682, 
0.3560, -0.0402, -0.3861, 0.2759, -0.4253, 0.0035, -1.2439, -0.5303, -0.1853, 1.1040, -0.7702, 
0.0052, 1.1034, -1.2570, -0.0054, 0.6655, -0.1019, 0.6065, 0.4453, -0.0201, 0.3580, 0.1536, 
0.0236, 0.0157, -0.7890, -0.2546, 0.9625, 0.0331, -0.2407, -0.1174, -0.7600, -0.0255, -0.0418, 
-0.0146, 0.5293, 0.2750, 0.3407, 0.0133, 0.6635, -0.6473, 0.5342, -1.2486, 0.8833, 0.0117, 
-0.1282, 0.9030, -0.0028, -0.3492, 0.5184, -0.7364, -0.7152, -0.0184, -0.6800, 0.4175, -0.0082, 
-0.0126, 0.7757, -0.0689, -0.5726, -0.3400, -0.1183, 0.7625, 0.6138, 0.9709, -0.3027, 0.0152, 
-0.1030, 0.5747, -0.3547, -0.0143, -0.7178, -1.9158, 0.4580, 0.0387, 0.3652, 0.0227, 1.5282, 
-0.8287, -0.0097, -0.8330, 0.5614, 0.0884, 1.0802, 0.0024, 0.3256, 0.8085, 0.0063, 0.0121, 
0.2118, -0.3566, -0.7868, 0.8736, -0.0054, -2.5080, 0.6331, -1.8706, -0.3475, -0.0149, -1.7731, 
0.1858, -0.5613, -0.0083, 0.7123, -0.1025, -0.2080, 0.9823, 0.1777, -0.0050, -1.2860, 1.9564, 
-0.0007, 0.5873, 1.4092, -0.7764, 0.0264, 0.0053, -1.2972, 0.0405, -0.0080, 0.0104, 0.8922, 
0.7314, -1.1333, -0.1260, 0.7140, 0.7637, -0.1307, 0.5906, 0.3836, -0.0154, 0.4272, -0.1162, 
-1.5735, 0.0096, -0.2321, -0.7203, -0.2287, 0.3899, 0.3967, -0.0006, -0.3956, 1.0182, 0.0236, 
-0.2099, 1.3991, -0.9546, 0.4545, 0.0096, -0.7855, 0.0759, 0.0277, 0.0009, 0.6718, 0.6082, 
-0.8759, -0.2590, 2.2639, -1.3199, 0.5501, 0.8974, -0.2472, 0.0049, 1.0487, 0.6304, -0.8398, 
-0.0101, -0.2444, -0.2112, -0.3450, 1.2127, 1.5077, -0.0336, 0.4984, -0.6986, 0.0223, 0.2118, 
-0.4520, 0.8194, -1.7843, 0.0076, 0.0984, -0.5388, 0.0196, -0.0072, -2.6783, 1.5554, -1.4202, 
-0.9471, -0.3936, 0.5031, -3.0838, 1.2713, 1.0798, -0.0087, 0.7303, -0.2588, -0.1846, 0.0006, 
-0.4052, -0.6369, 0.3119, 0.4323, 0.0054, -0.0143, 0.3685, -0.4835, -0.0266, -1.5793, 0.6067, 
-0.4342, -0.4682, -0.0106, -1.4014, 1.0713, 0.0145, -0.0174, 0.5207, 0.0846, -0.9906, 0.0876, 
-0.4465, -0.6580, -0.0191, 0.7347, 1.1991, -0.0038, -0.7814, -0.4180, 0.4941, 0.0094, 0.4427, 
0.2668, -0.3127, -0.3145, -0.2621, -0.0155, -1.5802, -0.3939, -0.0215, 1.3082, 0.4412, -1.0850, 
1.3372, 0.0135, 0.6136, -0.0857, -0.0550, 0.0084, -0.5590, 0.4500, -0.7855, -0.7416, 0.4621, 
-0.1073, -0.3524, -0.2267, -0.2371, 0.0066, -2.3679, 0.4380, 0.7111, -0.0063, -0.2289, 1.2687, 
-0.2270, 2.2731, 0.0502, 0.0197, 0.0309, -1.0093, 0.0257, 0.3545, 1.1503, 0.2529, 0.9224, 
0.0021, 0.1398, -0.9182, -0.0390, 0.0250, -0.2668, 0.0798, 0.4717, -0.4359, 1.1202, 2.0226, 
-1.0434, 0.6737, 0.6657, 0.0167, 0.1838, -0.2465, -0.1418, 0.0042, 0.1769, 1.6190, -1.0459, 
0.6003, -0.4237, -0.0138, -0.9754, 0.8761, 0.0129, 0.2913, 1.4255, 0.4580, 0.1268, -0.0016, 
0.5374, -0.8440, -0.0268, -0.0067, 1.0087, -0.5808, 0.7826, -0.1562, 1.0863, -0.5791, 0.4325, 
-0.4241, -0.0534, 0.0298, 0.0342, 0.0151, -0.0065, -0.0091, 0.9946, -1.1303, 0.8997, -0.0430, 
1.3105, 0.0019, -0.2920, -0.8047, -0.0037, -3.5439, -1.0579, -0.1618, 0.2730, 0.0196, -1.1384, 
0.0410, 0.0291, -0.0088, -1.1101, -0.4655, 0.4312, -0.0559, 0.7520, -0.4250, -0.0139, -0.9089, 
0.4658, -0.0065, -0.3520, -0.0613, -0.5780, -0.0042, -1.9684, 0.3147, 0.1511, -2.9015, -1.2924, 
0.0067, 0.4367, 0.7907, 0.0409, -0.0092, 0.0893, 1.1817, 1.8916, 0.0305, 0.7592, -0.3532, 
-0.0036, 0.0027, 0.0161, -0.1907, 0.2640, 0.8656, -0.0626, -1.1963, -0.4154, -0.1718, 0.2226, 
0.0154, -0.7120, -2.0126, -0.2813, 0.0036, 0.7207, -0.6098, 0.7984, 0.7752, -0.5314, 0.0052, 
-0.0414, -0.1651, 0.0057, 0.5989, 1.0892, 0.1319, 0.3109, 0.0059, 0.7426, 0.0983, -0.0027, 
-0.0096, -0.3693, 0.1972, -0.3136, 0.2012, -0.8557, 1.0019, -0.0456, 0.1568, -0.4816, -0.0289, 
0.7012, -0.0070, -1.3532, -0.0126, 0.7353, 0.2742, -0.0492, -0.6741, -1.2868, -0.0046, -0.4192, 
-0.8904, 0.0277, 1.3388, 0.7458, 1.3360, -0.2728, 0.0222, 0.5238, -0.3320, -0.0117, 0.0052, 
-1.3869, 0.8517, 0.2338, 0.0462, -0.3682, 0.0710, -0.4171, 0.7230, -0.3606, 0.0188, 1.0865, 
-0.1551, 0.5649, 0.0002, -0.8437, -0.7892, 0.3777, -1.1529, 0.6962, -0.0340, 1.1519, -0.7880, 
0.0153, -2.8821, 0.2298, 0.5041, 1.9120, 0.0188, 0.5011, 0.6910, 0.0215, 0.0281, 0.4350, 
0.1090, -0.3832, -0.1811, -1.3690, 1.6927, 0.4188, -0.3184, 0.2626, 0.0012, 0.2696, 0.7107, 
-0.0048, -0.0088, -0.3968, -0.8103, 0.3826, -0.4114, -0.6385, -0.0198, -0.2688, 0.6372, -0.0088, 
0.1554, -0.0194, -2.0871, -1.2823, 0.0087, -0.5485, 0.7810, -0.0204, -0.0089, 1.2859, -1.4324, 
-0.5725, -0.1087, -0.6173, -0.1060, -0.8380, -2.2218, 0.5243, 0.0044, 0.5747, -0.3378, -0.0720, 
-0.0166, -1.5445, 1.5430, 0.7032, -0.7525, -0.0559, -0.0041, -1.2377, -1.2170, -0.0018, 0.5231, 
-0.5861, -0.6081, -0.4988, 0.0206, -0.8179, -0.5841, 0.0144, -0.0081, 0.5576, -0.2768, 1.3184, 
-2.6706, -0.8319, 0.7488, -1.2921, 1.1092, 0.9105, -0.0002, 1.0260, 2.3716, 0.4689, 0.0053, 
-1.3012, 1.2711, -0.3959, 0.0943, 0.6500, 0.0323, 1.2036, 1.1646, -0.0092, 0.5430, 0.5052, 
-0.8343, -1.8500, -0.0068, -0.0922, 0.6508, 0.0237, 0.0179, -0.7005, -0.1053, 0.1508, -0.4474, 
0.3639, -0.6971, 0.8756, 0.0986, -1.2861, 0.0086, -0.7588, 0.6039, 0.3871, 0.0121, 0.1241, 
-0.9219, -1.2378, -0.2337, 0.0130, 0.0313, -0.0768, -0.0065, -0.0211, 0.0784, -0.9616, 0.6584, 
-0.9761, 0.0163, 0.2488, -0.2900, 0.0262, 0.0140, -1.3573, -0.4574, 0.5340, -0.5836, -1.1061, 
1.4119, -0.4821, 0.0306, -0.0235, -0.0006, -0.1824, 0.0119, 0.6443, -0.0080, 0.4768, 1.0888, 
0.1294, 1.0769, -1.4735, 0.0000, -0.3588, -0.0484, 0.0013, 0.6951, 1.1398, 0.5132, 0.7368, 
-0.0034, 0.1781, 0.3593, 0.0154, -0.0099, -0.6515, -0.8216, 0.1288, -0.0235, 0.5572, 0.5687, 
-1.8520, -0.2117, 1.3683, 0.0007, -0.2192, -0.1503, 0.1511, 0.0040, 1.0312, 0.9615, 0.3641, 
0.7108, -1.2565, 0.3426, 0.6257, -0.7591, -0.0381, -0.4440, 0.1910, -1.9792, -2.0162, 0.4773, 
0.5271, -1.2467, 0.4459, 0.2079, -1.4212, -0.4179, -1.7670, 0.5310, -0.8521, 1.5889, 0.3216, 
-0.7682, 1.1271, -0.1154, 0.7325, 1.1688, -0.6005, -0.2962, 0.3583, -2.7215, -0.4042, -0.0012, 
0.5562, -0.4670, 0.9071, -0.9936, 1.1625, -0.4680, -0.2204, -0.0960, -1.2111, 0.1886, 0.3161, 
-0.9386, -0.1220, 1.0281, -0.6877, -0.0207, 0.4580, 0.2693, 0.2066, 0.7433, -0.3463, -0.2147, 
-0.2686, -0.4448, 1.0437, -1.0937, 0.0168, 0.7392, 0.7671, 0.2446, -0.1433, 0.5917, -1.7294, 
0.2946, -0.3953, 0.6402, 0.3588, -0.1399, -0.4596, 0.4497, -0.4538, 0.1131, -0.2322, -0.8198, 
-1.2447, -1.1113, -1.0501, 0.3899, -0.1309, 0.1831, 0.8335, -0.8446, 0.6795, 0.7655, 0.3024, 
-1.0631, 0.4893, -0.4582, -0.0787, 0.0855, -0.4888, 0.3321, 0.4959, 0.5852, -0.5971, 0.5776, 
0.0800, 0.9763, 1.2146, -0.0915, -0.2013, 1.0210, 0.8808, -0.4526, -1.0551, 1.4202, -0.6870, 
-0.7511, 0.2425, -0.0143, -0.0435, 0.9191, -0.9512, -0.3755, 0.9080, -0.0164, 0.5603, -0.7134, 
-0.3008, 0.9320, 0.4597, 0.4154, -0.1626, -2.2732, 0.1601, 0.3804, -0.8411, 0.8503, -0.7037, 
-0.7987, 0.2593, -1.5137, -1.2783, 1.1013, -0.6130, -0.5623, -0.6166, -0.2695, 0.6681, 1.3198, 
0.7440, -0.1295, 0.7677, -0.1668, -0.0025, 1.1210, -0.4676, -0.8589, 0.9940, -0.9835, 0.4436, 
-0.4369, 0.1079, 0.1360, -0.0825, -0.7095, 0.0681, -1.3845, 0.5852, 0.8321, 0.0605, 1.1025, 
0.3809, -0.7221, 0.5267, -0.1641, -0.6587, -0.7080, 0.3581, -0.4730, -1.2431, 0.7567, 0.4748, 
0.2086, -0.3209, 0.4044, -0.0655, -0.6807, -0.5062, -0.1792, 0.9899, 0.0738, -0.4651, 0.5615, 
-0.2979, -0.0789, 0.0056, -0.2647, 0.4159, -0.0418, 0.6227, 0.4040, 0.3636, -0.5264, -0.0963, 
1.3062, -0.2342, 0.2348, -0.7170, -0.9199, -0.4551, 0.1270, 0.2857, -1.4278, -0.2762, 0.4388, 
-0.6362, -0.2597, -0.2475, -1.0338, -0.1308, -0.0719, 0.4898, 0.0274, 0.6681, -0.6961, -0.8782, 
-1.1522, 0.7324, 1.4559, -0.5088, 0.3230, 0.0724, -0.2616, -0.1929, -0.8039, 0.3292, 0.6831, 
-0.9345, 0.0043, -1.1654, -0.0865, 0.2562, -0.0593, 1.2474, -1.3338, 0.0027, -0.3772, -0.7264, 
0.8516, -1.9820, 0.1548, -0.0778, 0.7137, -0.6119, 1.2299, 0.0138, 0.5013, -0.7631, -0.9939, 
-0.6386, -0.3077, 0.1781, -0.0237, -0.3262, 0.2881, 0.1228, 0.0844, 0.1961, -0.8574, 0.4877, 
-0.5856, -0.8566, -0.0642, 0.3583, -0.1731, -0.0220, -0.2000, -0.1868, -1.0696, -1.5965, 0.4023, 
0.5220, -0.6586, 0.4334, -1.0592, 0.2308, -0.2647, 0.8456, -0.1612, -0.9128, -1.2446, -0.1251, 
0.2892, -0.5044, -0.3747, -0.3555, 0.5972, -0.1808, 0.2070, -0.6374, -0.6036, -1.3443, -2.0261, 
1.2490, -0.0177, 0.3175, 0.2166, -0.5418, 0.9668, 0.6408, 0.3539, 0.1286, 0.5480, -0.4669, 
-0.7592, 0.1993, -0.5903, 0.1730, 0.1197, -0.4827, 0.4653, -0.4525, -0.8513, -0.4576, 0.8194, 
0.9134, 1.3234, 0.9791, 0.5079, 0.4611, 0.3363, -0.4372, 0.9258, -0.5428, 0.7705, -0.2705, 
0.7332, -0.1152, 0.1458, 0.7850, 0.6869, 0.0914, 0.1422, 0.8796, -0.2120, 0.4945, 0.9192, 
0.3583, -0.1265, 0.5735, 0.2788, 0.2601, -0.8112, -0.3187, 0.3663, 0.6416, -0.3823, 0.2522, 
0.2696, -0.5346, 0.2838, -0.2619, -0.5507, -0.7322, 0.5860, -1.0451, -0.1326, -0.7068, 0.4106, 
0.5367, -1.2288, 0.2050, 0.2645, -0.2115, -0.0111, -0.8958, -1.2505, 0.3066, 1.4262, 0.4448, 
-0.0143, -0.0997, -0.8134, 0.6952, -1.7971, 0.7330, -0.5741, 0.6936, -0.6141, 1.7770, 0.3935, 
0.1708, -0.2148, -0.0437, 0.1934, 0.0524, -1.0573, 0.2667, 0.7637, -0.4432, 0.5039, 1.1426, 
0.2580, 0.5152, -1.2821, 0.9741, 0.1809, 0.1923, -1.0616, 0.7731, -0.4472, -0.2922, -0.0814, 
0.8629, 0.1368, 0.4933, -0.8948, -0.2161, -0.8033, -0.1695, -0.4781, 0.7218, 0.1313, 0.3117, 
0.8950, -1.1923, -0.3072, 0.6421, 0.4300, -2.4470, 1.3093, -0.4241, -0.5472, 0.4420, 0.3381, 
1.6517, -1.8540, 0.8487, 0.8205, -0.0164, -0.9833, -0.2729, 0.2228, -0.5919, 0.0830, 0.7659, 
-0.0579, 0.0444, 0.1895, -1.5587, -0.6519, -0.0190, -0.8966, 1.1691, -0.7786, -0.1883, 0.1409, 
0.0896, 1.1640, 0.5104, -0.8119, 0.8620, -1.0101, -0.3579, -1.6250, 0.0481, -0.4517, -0.2207, 
-0.2543, 0.2868, -1.8291, -0.0428, -0.2019, -0.7567, -2.2016, -0.0463, 0.7084, -0.6590, 0.2548, 
-1.3411, 1.9429, -0.2899, -0.6012, -1.8306, -0.1281, -0.0534, 0.3422, -0.5059, 0.2954, -1.0717, 
0.2148, -0.2702, 0.6576, 0.3255, 0.5079, 1.0290, -0.0792, 1.2377, -1.0057, 2.2866, -0.6935, 
0.3854, -0.7936, 0.5195, -0.5747, 0.7711, -0.9002, 0.1013, 0.6881, 0.7099, -0.2997, 0.0446, 
-0.7431, -0.7670, 0.1127, -0.8658, 1.8997, -0.4320, -0.6225, -0.3152, -1.2941, -0.0790, -0.8243, 
-0.2412, -0.1087, 0.3323, 0.1274, -1.1266, 0.2729, -0.5817, 0.2157, 0.4869, 0.0630, -0.2592, 
-0.6345, -0.2924, -2.2870, -0.3677, 0.0337, -1.2604, -0.6918, -0.0929, -0.7726, -0.3030, 1.0100, 
0.1473, 0.4599, -1.3256, 0.8796, 1.5478, 0.6699, -0.6653, 0.1552, -0.0816, -0.4298, -0.5381, 
-0.0087, -1.6599, -0.4192, -0.4127, 0.0655, -0.6082, -1.3003, -0.3227, -0.3404, 0.5386, -0.0505, 
-0.4408, -0.6571, 0.8695, 0.3474, -1.0971, -0.5846, 0.4892, 0.1851, 0.0245, 0.4851, 0.9137, 
0.5579, 0.1807, -0.3458, -1.1599, 0.1899, 0.4100, 0.0861, 0.6511, -0.1799, -0.6587, 0.2953, 
-0.2669, -1.5148, 0.6587, -0.5553, -0.1108, -0.0009, 0.2148, -0.0202, -0.4221, 0.4103, -0.2589, 
0.0890, 0.6213, 0.5491, 0.2326, 0.4956, -0.1025, 0.6397, 0.0741, 0.0642, 0.7262, 0.5070, 
-0.2106, -0.2947, -0.6731, 0.5036, -0.3751, 0.1505, 0.2574, -0.1145, -0.5114, -1.3168, 0.0144, 
0.3128, -0.1230, -0.0783, 0.5160, -0.3098, -1.2948, -0.2636, -0.9889, -0.1309, 0.8780, 0.8369, 
0.6396, -0.1321, 0.5048, 0.4279, -1.6269, 0.5765, 0.4810, 0.1615, -0.5022, -1.4363, -0.3429, 
-1.3899, 0.7932, -0.2422, -0.1044, -0.3836, -1.9323, 0.0427, -0.3404, 0.1114, 0.5713, -0.9552, 
0.5966, -1.5306, 0.3490, 0.7517, 0.7451, -0.8441, -0.1107, -0.4358, 0.5782, -1.0853, 0.1196, 
-0.9939, -0.4254, -0.8361, 0.3055, -1.2385, 1.1064, -0.2365, -1.0342, -0.7817, 0.2120, -0.3241, 
0.5504, -0.7827, -0.0637, -2.1733, 0.4534, -0.5688, 0.2945, 0.9055, 0.5326, -0.1585, 0.7324, 
-0.1533, -0.3894, -1.5642, 0.4856, 0.2225, -0.2227, -1.6340, -0.4287, -0.4354, 0.1731, 0.6402, 
-0.0743, 0.1931, -0.7186, 0.6786, -1.2820, -0.2227, 0.7574, 0.6806, -0.4493, -1.3490, 0.3093, 
0.0931, -0.4481, 0.9673, 0.1425, -0.3327, -0.1494, 1.1964, 0.4227, -0.4073, 0.7025, 0.6498, 
0.7884, -0.7188, 1.3858, 0.4515, -0.9979, 0.1908, 1.3719, 0.3361, -0.8257, 1.1756, -0.1589, 
-0.2409, 1.3644, -0.0627, -0.3256, -0.3890, -1.4530, 0.0177, -0.5089, 0.1421, -0.4634, -0.2485, 
0.1502, -0.6235, -0.6336, -0.4525, -1.0850, -0.8245, 1.0048, -0.4884, -1.1681, -0.1713, -0.7141, 
0.2250, -0.0005, -0.4913, -0.1702, -0.2851, -0.4535, -0.0510, -0.3361, -0.3893, 0.0279, -0.0161, 
-0.3197, 0.3363, 0.1706, 1.1265, -0.2793, -0.0831, -0.8223, -0.3736, 0.7576, -0.0416, 0.6002, 
-0.1643, -0.2261, 1.0334, 0.5014, -0.4965, -0.8434, -0.6047, -1.4453, 0.3919, 0.4876, 0.6502, 
-0.3849, -0.9699, 0.8736, -0.4790, -0.6747, 0.1407, -0.0722, 0.3787, 0.6481, -1.9073, 1.1740, 
1.1456, -0.2385, -0.6735, 0.0134, -0.0648, 0.2784, -0.2075, 0.2192, 0.7126, -0.2530, 1.0569, 
0.4630, -0.4768, -1.5135, -0.0320, -0.5077, -0.4773, 0.2095, 0.0581, 0.2799, -0.0718, 0.1004, 
-0.8941, -0.7096, 0.9014, -0.8832, -0.5268, 0.1379, 0.0870, 0.3177, -0.1767, -0.8781, 0.8684, 
0.9020, -1.3122, -0.9206, -2.0631, 0.5132, -0.1977, -0.7251, -0.0888, -1.4335, 0.4184, 1.1666, 
-1.1485, 0.9747, 0.3180, 0.4200, 0.4472, -0.2513, -0.5234, -0.8721, -1.8589, 1.0140, 0.9771, 
0.4363, 0.3374, -0.6595, 0.2879, -1.0252, -0.1044, -1.1856, -0.4153, -0.6517, -1.0178, 1.0538, 
1.4262, -0.1001, 0.4477, -1.3394, 0.1495, 0.0589, -0.7254, 0.0472, 0.3313, -0.2133, -0.2408, 
-1.0380, -0.7772, 0.5337, 0.0496, -0.0411, -0.1126, 1.0657, 0.3442, 0.6248, -0.8121, -2.1604, 
0.6243, -1.1335, 0.6896, -0.7523, 0.1527, -0.4389, 0.4157, 0.5143, 0.1589, -0.5768, -0.6495, 
-0.4035, -0.2209, 0.5325, 1.1390, 0.8578, -0.4047, 0.8918, -0.6158, 0.1705, -0.5199, -0.4463, 
-0.3637, 0.2485, -0.1858, 0.4594, 0.0173, -0.3136, 0.1836, -0.1839, -1.7145, -0.6577, -0.3875, 
-0.0999, -0.4030, 0.7508, -1.0110, 1.0949, -0.4468, 0.6666, -0.0360, 0.6937, 0.1490, 0.1237, 
0.8602, -0.3471, -0.3891, -0.4182, 0.3821, -2.4090, -1.8317, -0.5282, 0.4636, -0.1941, -0.7429, 
-0.1168, 1.3070, -0.1820, 0.7605, 0.7031, 1.0166, -0.7771, 0.4137, -0.0704, 0.1944, -0.6597, 
-0.4903, 0.0338, 0.5349, -0.9897, 0.7137, 0.6469, -0.2258, -0.2187, 1.4367, 0.2616, -1.5112, 
-0.9768, 0.7649, 0.3928, -0.1063, -0.3380, -0.1430, 0.4605, 0.5874, 0.7531, 0.4078, 0.4331, 
0.3250, 0.7644, 0.0315, 0.1611, 0.3085, 0.5133, 0.0586, 0.8963, -0.3265, -0.1730, 0.9052, 
0.8342, 0.3631, 0.4212, 0.8943, -0.3559, 0.9505, -0.0670, 0.6717, 0.5663, -0.2270, 0.4086, 
-0.7122, 1.0930, 0.7699, -0.3333, -0.5880, 0.7524, 0.0631, 0.3611, -0.3387, 0.6447, 0.7071, 
1.3717, -0.2330, -0.2985, 1.2664, -0.5824, 0.7442, 1.0204, -1.5572, 0.8220, -1.4747, -0.8639, 
-1.2992, -0.2264, -0.8866, -1.6053, -0.8595, 0.2685, -1.0495, 0.5109, 0.4357, 1.0904, 0.0039, 
-0.0125, -0.0043, -0.0141, 0.0295, -0.0254, -0.0040, 0.0001, 0.0102, 0.0220, 0.0057, 0.0083, 
0.0034, -0.0209, 0.0099, -0.0179, 0.0273, -0.0214, -0.0182, -0.0184, -0.0151, 0.0035, 0.0006, 
0.0134, -0.0076, 0.0122, -0.0277, 0.0159, 0.0163, -0.0215, -0.0076, 0.0247, -0.0573, 0.0042, 
-0.0070, 0.0176, -0.0016, -0.0391, -0.0207, 0.0092, 0.0048, 0.0027, -0.0193, -0.0200, -0.0116, 
-0.0191, -0.0188, -0.0113, 0.0145, -0.0147, -0.0643, 0.0319, -0.0372, 0.0457, -0.0813, 0.0119, 
0.0334, 0.0233, -0.0298, 0.0167, -0.0174, -0.0079, -0.0194, -0.0314, -0.1111, -0.4043, -0.3005, 
-0.0540, 0.2397, 0.1314, 0.5226, 0.3570, -0.2072, 0.3573, -0.1222, -0.2606, 0.1134, -0.9201, 
-0.0910, 0.0539, -0.0296, 0.3822, 0.0619, 0.2567, 0.0119, -0.1748, -0.3136, 0.0420, -0.7668, 
-0.1395, -0.1276, 0.1549, 0.0530, -0.1428, -0.5038, -0.1618, -0.0078, -0.0399, -0.0277, 0.0161, 
-0.0002, 0.0375, 0.0123, 0.0098, -0.0168, 0.0047, -0.0314, -0.0369, -0.0288, -0.0001, 0.0202, 
-0.0057, 0.0282, -0.0366, -0.0351, -0.0371, -0.0074, 0.0179, -0.0141, 0.0053, 0.0316, -0.0117, 
-0.0149, -0.0339, -0.0310, -0.0066, -0.0129, 0.0986, -0.0281, 0.0171, -0.0002, -0.0002, 0.0148, 
-0.0127, 0.0257, 0.0075, 0.0048, 0.0153, 0.0002, 0.0001, -0.0169, -0.0171, 0.0140, 0.0136, 
0.0226, -0.0005, 0.0059, -0.0007, -0.0259, 0.0123, -0.0085, 0.0094, -0.0026, 0.0048, -0.0236, 
0.0088, -0.0119, -0.0165, -0.0073, 0.0272, -0.3997, -0.0646, -0.4748, 0.0980, -0.3192, -1.1887, 
-0.9240, 0.0744, -0.2605, -0.5374, -0.3752, 0.2806, -0.1946, -0.3414, 0.1628, -0.1341, -0.2798, 
0.1494, 0.2516, 0.5300, -0.2229, -0.5047, 0.1844, -0.4397, 0.0236, -0.1883, -0.1733, 0.1306, 
0.1889, -0.2573, 0.1055, -0.1112, -0.0160, 0.0029, -0.0109, -0.0230, 0.0353, -0.0024, -0.0014, 
-0.0047, -0.0029, 0.0099, -0.0130, -0.0001, -0.0226, -0.0128, -0.0027, 0.0012, 0.0278, 0.0018, 
-0.0158, 0.0066, -0.0057, 0.0299, -0.0047, 0.0232, 0.0230, 0.0189, -0.0485, 0.0065, -0.0125, 
0.0083, 0.0098, 0.0145, -0.2843, 0.1360, -0.1590, -0.4197, 0.3097, 0.0515, -0.6931, 0.3596, 
0.5024, 0.1935, -0.0888, -0.1666, -0.2825, 0.4931, 0.3587, -0.3015, 0.0184, -0.2614, -0.4572, 
-0.5801, 0.4817, 0.2702, -0.4570, -0.0898, -0.2800, -0.2925, -0.2057, 0.0188, -0.8359, -0.2937, 
-0.1204, -0.1620, -0.0137, 0.0063, -0.0105, 0.0006, 0.0204, 0.0009, 0.0087, -0.0036, -0.0110, 
-0.0180, -0.0115, 0.0036, -0.0113, -0.0075, 0.0060, 0.0223, 0.0412, -0.0003, -0.0281, -0.0050, 
0.0061, 0.0303, -0.0209, 0.0178, 0.0027, 0.0172, -0.0498, 0.0068, -0.0062, -0.0305, 0.0090, 
0.0216, -0.0006, -0.0029, 0.0013, 0.0237, -0.0035, 0.0071, 0.0104, 0.0081, 0.0050, 0.0189, 
-0.0105, 0.0018, 0.0116, -0.0086, 0.0344, 0.0156, 0.0615, -0.0353, -0.0261, -0.0090, 0.0005, 
0.0400, 0.0072, 0.0159, 0.0098, 0.0309, -0.0684, -0.0129, -0.0158, 0.0039, -0.0111, 0.0307, 
-0.2694, -0.2972, 0.3293, 0.1010, 0.0258, -0.4605, 0.1234, 0.6190, -0.3782, -0.5331, -0.2268, 
0.8190, -0.0987, -0.2132, -0.2056, 0.2425, 0.0692, 0.4386, 0.2301, 0.1515, 0.1529, -0.4747, 
-0.1200, 0.2879, 0.1043, -0.7773, 0.0930, -0.2048, -0.0649, -0.4823, -0.1379, 0.3543, -0.8462, 
-0.3350, 0.1005, 0.1871, -0.2445, -0.4884, -0.4541, 0.0385, 0.0287, -0.7943, -0.0401, -0.2635, 
-0.2452, 0.1825, -0.2038, -0.0420, 0.0692, -0.9232, 0.0637, -0.1567, -0.1699, -0.1991, -0.2292, 
-0.3626, -0.2872, 0.1459, 0.4003, 0.0828, -0.3624, -0.5574, -0.1634, 0.1962, 0.4666, 0.3801, 
-0.5025, 0.1513, 0.5822, 0.8416, 0.3831, -0.2287, 0.5995, 0.7514, -0.1493, -0.1694, -0.2351, 
0.3374, -1.4076, 0.0078, 0.9359, -0.3488, -0.1418, 0.2597, -0.7749, 0.2772, 0.0402, -0.3209, 
0.7518, 0.1575, 0.3333, 0.0235, 0.7109, 0.6438, 0.0843, 0.1048, 0.4977, -0.0625, 0.0505, 
-0.0920, -0.2169, -0.0431, 0.1763, -0.5736, 0.2029, 0.3672, -0.0139, 0.3500, -0.8895, 1.0033, 
0.3873, -0.3738, 0.4479, -0.5078, 0.0546, 0.7087, 0.1121, 0.1215, 0.1777, 0.0260, 0.3595, 
-0.2566, -0.0152, -0.3105, -0.2985, 0.0721, -0.0404, 0.5817, 0.2341, -0.2425, -0.3886, -0.1910, 
0.4061, 0.3619, -0.2446, 0.1320, 0.1558, 0.6732, -1.5964, -0.0488, -0.2317, 0.0393, -0.0701, 
-0.0063, -0.3830, 0.0739, 0.0492, -0.0761, 0.1364, 0.6627, -0.1083, 0.3674, -1.1465, 0.1626, 
-0.5847, -0.2995, 0.0215, -0.0454, -0.7884, 0.0454, 0.4416, 0.0710, 0.1936, -0.3656, -0.0212, 
-0.8280, -0.1572, -0.3725, -0.2825, 0.0677, 0.0397, -0.0422, 0.5133, -0.1535, 0.6457, -0.2042, 
-0.4008, -0.8220, -0.1280, -0.4479, 0.0899, 0.4617, -0.1454, -0.2475, -0.0147, -0.0367, 0.1473, 
-0.2201, -0.3553, -0.3234, -0.1235, -0.5960, 0.0164, 0.0113, 0.0133, 0.0052, 0.0105, 0.0157, 
-0.0058, -0.0429, 0.0360, 0.0023, -0.0267, -0.0150, -0.0155, -0.0235, 0.0345, -0.0028, 0.0009, 
0.0071, -0.0264, -0.0017, -0.0103, 0.0352, -0.0145, 0.0120, 0.0246, -0.0033, -0.0272, -0.0161, 
-0.0001, 0.0312, -0.0222, 0.0025, -0.6540, -0.0966, -0.1522, -0.1767, 0.2894, 0.1715, -0.2085, 
-0.1053, 0.1221, -0.5922, -0.2623, -0.0463, 0.1301, 0.3376, -0.0646, -0.3653, -0.1716, -0.6340, 
-0.1533, -0.2490, 0.0071, 0.3125, -0.2388, 0.3027, 0.4351, -0.0169, -0.1282, -0.4638, 0.3037, 
0.5839, -0.1784, -0.1407, -0.6260, 0.2673, 0.1720, 0.2260, -0.6548, -0.7909, 0.2983, 0.2197, 
0.5014, 0.4145, 0.2490, 0.2199, -0.0351, 0.3555, -0.1216, -2.2854, -0.8020, 0.7741, 0.1356, 
0.1085, -0.3565, -0.4308, 0.6916, -0.3289, -0.4633, -0.4432, 1.0548, 0.6184, -0.3230, 0.1334, 
-0.4709, -0.1090, 0.0035, 0.0105, -0.0000, 0.0038, 0.0056, 0.0268, 0.0081, 0.0142, -0.0066, 
0.0001, 0.0055, -0.0072, -0.0080, -0.0229, -0.0043, 0.0192, -0.0032, -0.0111, -0.0069, -0.0176, 
0.0148, -0.0005, -0.0348, 0.0147, -0.0182, 0.0095, -0.0253, -0.0037, 0.0018, 0.0060, -0.0067, 
0.0085, -0.1380, -0.1516, -0.2576, -0.3296, 0.3229, 0.4967, -0.4356, -0.1980, -0.1747, -0.0475, 
-0.1013, 0.3357, -1.0082, -0.9079, -0.1032, 0.1784, 0.7716, -0.4379, 0.2831, -0.0838, 0.5897, 
-0.6358, -0.3806, -0.0302, -0.5958, -0.6468, -0.3181, 0.0446, 0.2366, -0.2941, -0.2416, 0.3141, 
0.0396, -0.0012, -0.0119, 0.0222, 0.0196, 0.0286, -0.0118, 0.0153, -0.0275, 0.0010, -0.0164, 
-0.0009, 0.0140, 0.0048, 0.0252, 0.0050, 0.0488, -0.0736, -0.0620, -0.0518, -0.0072, 0.0210, 
-0.0258, 0.0174, 0.0257, -0.0046, -0.0359, -0.0079, -0.0238, -0.0116, -0.0079, 0.0526, 0.0240, 
-0.0111, -0.0065, -0.0040, -0.0093, -0.0018, 0.0152, -0.0121, 0.0243, -0.0106, -0.0329, 0.0059, 
-0.0118, 0.0005, 0.0308, 0.0093, 0.0540, 0.0053, -0.0180, 0.0098, 0.0151, 0.0167, -0.0352, 
0.0329, 0.0267, 0.0103, 0.0052, 0.0110, -0.0139, -0.0115, -0.0151, -0.0003, 0.0675, 0.1134, 
0.1652, 0.1434, -0.4194, -0.0200, 0.0211, 0.0908, 0.3174, -0.2141, 0.1839, -0.0337, 0.0362, 
0.0312, 0.0983, 0.2610, -0.4272, 0.3050, 0.1847, -0.4244, -0.2417, -0.4032, 0.1031, -0.2263, 
0.0735, -0.0056, -0.2143, -0.0659, 0.0680, 0.2444, 0.1167, 0.1722, -0.0271, 0.0136, -0.0018, 
-0.0057, 0.0274, 0.0233, 0.0071, 0.0131, 0.0036, 0.0052, 0.0030, -0.0037, -0.0064, -0.0120, 
-0.0078, 0.0048, 0.0246, -0.0195, -0.0268, -0.0042, -0.0191, 0.0236, -0.0016, 0.0187, -0.0231, 
0.0137, -0.0124, -0.0050, -0.0035, -0.0025, -0.0035, 0.0235, -0.0863, -0.2747, -0.0108, -0.4556, 
-0.0516, -0.2851, 0.0425, 0.2456, 0.7792, -0.0678, -0.4548, -0.1451, 0.5612, -0.7380, 0.7055, 
-0.3787, -0.5319, 0.4520, 0.6840, -0.4663, 0.2353, -0.3937, 0.7171, -0.9562, -0.6100, -0.2000, 
-0.0853, -0.5535, 0.0812, 0.3153, 0.0399, 0.0400, 0.3203, 0.0844, 0.1427, -0.0923, 0.0073, 
-0.9656, 0.3525, -0.7014, -0.4454, 0.3953, -0.1185, 0.0713, -0.0364, 0.0244, 0.3998, -0.2131, 
-0.1445, 0.5095, 0.3547, 0.2000, -0.1532, 0.0778, 0.4257, 0.1901, 0.3652, 0.1030, -0.7259, 
0.3797, -0.1578, -0.0644, -0.0688, 0.4507, -0.6026, -0.1536, 0.2388, -0.0779, 0.3068, 0.1368, 
-0.4007, 0.3972, 0.2675, -0.0625, 0.0690, 0.1439, -0.3966, -0.2462, -0.1170, -0.0926, -0.3835, 
-0.2570, -0.4213, -0.3192, 0.1116, 0.2803, -0.1931, -0.1979, 0.1102, -0.0158, 0.2984, 0.1359, 
-0.2910, -0.0050, -0.1876, -0.2082, 0.0404, 0.2161, 0.2701, -0.5539, -0.1972, 0.1112, -0.1928, 
0.0182, -0.4393, -0.3906, -0.2795, -0.0278, -0.2386, 0.0365, 0.5180, -0.1013, 0.5163, -0.4942, 
0.0511, -0.4277, 0.0185, -0.2714, 0.2493, -0.3520, -0.0060, 0.2447, -0.1607, -0.0850, -0.1570, 
0.7170, 0.3975, 0.1406, -0.2307, 0.4881, 0.0488, -0.3951, -0.6936, -0.2529, 0.6593, -0.6423, 
-1.0615, 0.4348, -0.2204, 0.2450, -0.0903, 0.7853, -0.3225, -0.1225, -0.1328, 0.5915, -0.4914, 
0.0752, -0.3520, -0.3678, 0.1690, 0.1942, 0.8825, -0.1632, 0.7632, 0.5925, 0.3541, 0.2782, 
-0.1885, -0.0432, 0.2861, -0.0589, 0.1883, 0.2731, -0.6020, -0.0076, 0.0987, -0.0667, -0.0753, 
0.2087, -0.1074, 0.2055, -0.0564, 0.5432, -1.3425, 0.3430, -0.3974, -0.1266, 0.4371, 0.3234, 
0.6657, -0.4399, -0.1186, -0.0181, -0.0669, -1.0424, -0.6556, 0.2364, -0.5882, -0.8690, -0.1935, 
-0.3310, -0.3380, -0.1665, -0.1993, -0.4783, -0.0120, 0.1874, 0.6800, -0.0083, -0.0679, -0.1680, 
0.0455, -0.5998, -0.8488, -0.8015, -0.6805, 0.1687, 0.0129, 0.9224, -0.1131, 0.2286, 0.6124, 
0.1647, 0.3206, 0.0309, 0.4401, -0.2839, -0.4262, 0.2693, -0.3816, 0.3205, -0.1236, 0.2643, 
-0.0001, 0.0018, -0.0219, -0.0017, -0.0004, 0.0187, -0.0005, -0.0321, 0.0001, 0.0003, 0.0268, 
0.0244, 0.0195, -0.0241, -0.1098, -0.0181, 0.0017, -0.0229, 0.0258, 0.0002, -0.0449, -0.0002, 
0.0014, 0.0370, -0.0001, -0.0145, 0.0160, -0.0131, 0.0236, 0.0177, 0.0217, -0.0209
};

constexpr float biases[] {
-0.3867, 0.1746, -0.5758, 0.2307, -0.0157, -0.4884, -0.5818, -0.0094, 0.1981, -0.3026, -0.6063, 
-0.9125, -0.0030, 0.2129, 0.1765, -0.0106, -0.0065, -0.4815, 0.1919, 0.0849, 0.3321, -0.5782, 
-0.5608, -0.2297, 0.0756, -0.4128, -0.0041, -0.0205, -0.6315, 0.1674, -0.0015, -0.0256, -1.5903, 
-1.4000, -0.9304, 0.1078, 0.9444, -0.6151, -0.9163, -1.3614, -0.2150, 0.6524, -1.4286, -0.9360, 
-0.0450, -0.7075, 0.4856, -1.5841, -1.3737, -0.2277, -0.3577, -0.1831, -1.2139, -0.7175, 0.3511, 
0.0538, -0.5451, -0.7014, -0.2137, 1.2562, -0.7662, -0.4431, -0.5397, -0.1270, -0.3983, 0.3359, 
-0.5472, -1.6984, 0.3076, -1.7286, 0.0291, 0.6512, 0.2428, -1.0264, -1.2279, 0.0813, -0.8784, 
-0.2904, -0.4996, -1.2489, -0.2931, -2.0596, -0.8206, 0.3727, 0.2160, -0.9081, -0.2880, 0.7337, 
-1.3150, 0.0215, -1.1154, -0.7393, -1.0523, -0.6643, -1.0442, -0.8873, -0.0627, -0.0849, 0.0910, 
-0.0682, -0.0564, -0.3592, -0.0685, -0.3227, -0.0645, -0.0643, -0.5981, -0.4058, -0.7803, -0.3026, 
-0.7628, -0.1935, -0.0528, -0.1235, -0.2680, -0.0463, -0.7831, -0.0773, -0.0768, -0.1238, -0.0595, 
-0.1018, -0.3578, -0.1677, -0.5204, -0.2229, -0.3683, -0.6300, -0.0179
};

constexpr const char* titles[] {
  "Neural SDF - Private weights",
  "Neural SDF - UBO weights"
};

template<bool use_members>
struct [[
  .imgui::title=titles[(int)use_members],
  .imgui::url="https://www.shadertoy.com/view/wdVfzz"
]] bunny_t {

  vec4 render(vec2 frag_coord, shadertoy_uniforms_t u) {
    vec2 p = (frag_coord / u.resolution) * 2 - 1;
    p.x *= u.resolution.x / u.resolution.y;

    // ray cast
    float rx = ((u.mouse.y / u.resolution.y) - 0.5f) * 3;    
    float ry = ((u.mouse.x / u.resolution.x) - 0.5f) * 6;
    
    // camera
    mat3 m = rotY(ry) * rotX(-rx);
    vec3 ro = m * vec3(0, 0, 1.5) * Zoom;
    vec3 rd = m * normalize(vec3(p, -2));
            
    bool hit=false;
    vec3 hitPos = raycast(ro, rd, hit);

    vec4 color;
    if codegen(__is_spirv_target) {
      vec3 n = normalize(cross(glfrag_dFdx(hitPos), glfrag_dFdy(hitPos)));
      color = vec4(hit ? n * .5f + .5f : 0.f, 1);

    } else {
      color = hit ? vec4(1, 0, 0, 0) : vec4(0);
    }

    return color;
  }

  float leakyReLU(float x) {
    return max(0.0f, x) + 0.1f * min(0.0f, x);
  }

  static constexpr int H = 32; // size of hidden layers

  // compute MLP network layer
  // Note array_t deduction for Circle SPIR-V depointerization bug.
  template<int N, int M, typename array_t>
  void computeLayer(array_t& I, int wi, int bi, array_t& O, bool relu) {
    if constexpr(use_members) {
      @meta for(int i=0; i<M; i++) {{
        // Compile-time loop unrolling is crucial here. Without this, the
        // program runs 100x slower.
        float r = 0.0f;
        @meta for(int j=0; j<N; j++)
          r += I[j] * weights[i*N+j+wi];
          
        r += biases[i+bi];
        O[i] = relu ? leakyReLU(r) : r;
      }}

    } else {
      @meta for(int i=0; i<M; i++) {{
        float r = 0.0f;
        @meta for(int j=0; j<N; j++)
          r += I[j] * ::weights[i*N+j+wi];
          
        r += ::biases[i+bi];
        O[i] = relu ? leakyReLU(r) : r;
      }}
    }
  }

  // evaluate network at position p
  // returns distance to nearest surface
  float network(vec3 p)
  {
      // temp storage
      float _out[H];
      float _out2[H];
      
      // input
      _out2[0] = p.x;
      _out2[1] = p.y;
      _out2[2] = p.z;
      
      int wi = 0;
      int bi = 0;
      
      // layer 0 (input)
      computeLayer<3, H>(_out2, wi, bi, _out, true);
      wi += H*3;
      bi += H;
          
      // layer 1
      computeLayer<H, H>(_out, wi, bi, _out2, true);
      wi += H*H;
      bi += H;
      
    // layer 2
      computeLayer<H, H>(_out2, wi, bi, _out, true);
      wi += H*H;
      bi += H;
      
    // layer 3
      computeLayer<H, H>(_out, wi, bi, _out2, true);
      wi += H*H;
      bi += H;
      
      // layer 4 (output)
      computeLayer<H, 1>(_out2, wi, bi, _out, true);
      
      return tanh(_out[0]);
  }

  float sphere(vec3 p, float r)
  {
      return length(p) - r;
  }

  // cast ray using sphere tracing
  vec3 raycast(vec3 ro, vec3 rd, bool& hit)
  {
      hit = false;
      vec3 pos = ro;

      for(int i=0; i<maxSteps; i++)
      {
          float d = network(pos);
          if (abs(d) < .001f * hitThreshold) {
              hit = true;
              break;
          }
          pos += d*rd;
      }
      return pos;
  }

  mat3 rotX(float a)
  {
      float sa = sin(a);
      float ca = cos(a);
      return mat3(1.0, 0.0, 0.0, 0.0, ca, -sa, 0.0, sa, ca);
  }

  mat3 rotY(float a)
  {
      float sa = sin(a);
      float ca = cos(a);
      return mat3(ca, 0.0, sa, 0.0, 1.0, 0.0, -sa, 0, ca);
  }

  [[.imgui::range_int {1, 64}]] int maxSteps = 20;
  [[.imgui::drag_float=.01]] float hitThreshold = 1;
  [[.imgui::range_float { .1, 3 }]] float Zoom = 1;

  @meta if(use_members) {
    float weights[::weights.length] = { @pack_nontype(::weights)... };
    float biases[::biases.length] = { @pack_nontype(::biases)... }; 
  }
};

enum typename class shader_program_t {
  bunny_t<false>,
  bunny_t<true>,
};


////////////////////////////////////////////////////////////////////////////////

struct program_base_t {
  // Return true if any parameter has changed.
  virtual bool configure(bool update_ubo) = 0;

  // Evaluate the shader with the CPU at this coordinate.
  virtual vec4 eval(vec2 coord, shadertoy_uniforms_t u, 
    bool signal = false) = 0;

  GLuint program;
  GLuint ubo;
};

template<typename shader_t>
struct program_t : program_base_t {
  // Keep an instance of the shader parameters in memory to drive ImGui.
  shader_t shader;

  program_t();
  bool configure(bool update_ubo) override;
  vec4 eval(vec2 coord, shadertoy_uniforms_t u, bool signal) override;
};

template<typename shader_t>
program_t<shader_t>::program_t() {
  // Create vertex and fragment shader handles.
  GLuint vs = glCreateShader(GL_VERTEX_SHADER);
  GLuint fs = glCreateShader(GL_FRAGMENT_SHADER);
  GLuint shaders[] { vs, fs };

  // Associate shader handlers with the translation unit's SPIRV data.
  glShaderBinary(2, shaders, GL_SHADER_BINARY_FORMAT_SPIR_V_ARB, 
    __spirv_data, __spirv_size);
  glSpecializeShader(vs, @spirv(vert_main), 0, nullptr, nullptr);
  glSpecializeShader(fs, @spirv(frag_main<shader_t>), 0, nullptr, nullptr);

  // Link the shaders into a program.
  program = glCreateProgram();
  glAttachShader(program, vs);
  glAttachShader(program, fs);
  glLinkProgram(program);

  // Create the UBO.
  glCreateBuffers(1, &ubo);
  glNamedBufferStorage(ubo, sizeof(shader_t), nullptr, 
    GL_DYNAMIC_STORAGE_BIT);
}

template<typename shader_t>
bool program_t<shader_t>::configure(bool update_ubo) {
  bool changed = render_imgui(shader);
  if(update_ubo)
    glNamedBufferSubData(ubo, 0, sizeof(shader_t), &shader);

  return changed;
}

template<typename shader_t>
vec4 program_t<shader_t>::eval(vec2 coord, shadertoy_uniforms_t u, 
  bool signal) {

  if(signal)
    raise(SIGINT);

  return shader.render(coord, u);
}

////////////////////////////////////////////////////////////////////////////////

struct software_fbo_t {
  software_fbo_t(int width, int height);
  ~software_fbo_t();

  // Maintain an FBO and texture for running the shader program on the CPU.
  // We'll then upload it to this texture and glNamedFramebufferBlit it.
  GLuint texture;
  GLuint fbo;
  int width, height;

  std::vector<uint32_t> data;

  void update();
  void blit(int width2, int height2);
  void set_block(vec4 color, int x, int y, int sx, int sy);
};

software_fbo_t::software_fbo_t(int width, int height) :
  width(width), height(height) {

  glCreateTextures(GL_TEXTURE_2D, 1, &texture);
  glCreateFramebuffers(1, &fbo);

  glTextureStorage2D(texture, 1, GL_RGBA8, width, height);
  glNamedFramebufferTexture(fbo, GL_COLOR_ATTACHMENT0, texture, 0);

  data.resize(width * height);
}

software_fbo_t::~software_fbo_t() {
  glDeleteFramebuffers(1, &fbo);
  glDeleteTextures(1, &texture);
}

void software_fbo_t::update() {
  // Upload the texture data.
  glTextureSubImage2D(texture, 0, 0, 0, width, height, GL_RGBA, 
    GL_UNSIGNED_BYTE, data.data());
}

void software_fbo_t::blit(int width2, int height2) {
  // Get the attached renderbuffer.
  GLint fbo_dest;
  glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING, &fbo_dest);

  // Blit the texture to the renderbuffer.
  glBlitNamedFramebuffer(fbo, fbo_dest, 0, 0, width2, height2,
    0, 0, width2, height2, GL_COLOR_BUFFER_BIT, GL_NEAREST);
}

void software_fbo_t::set_block(vec4 color, int x, int y, int sx, int sy) {
  // Convert the color to RGBA8.
  ivec4 color2 = clamp((ivec4)(255.f * color + 1.f / 512), 0, 255);
  uint32_t packed = color2.r | (color2.g<< 8) | (color2.b<< 16) | 0xff000000;

  int index = width * y + x;
  for(int row = 0; row < sy; ++row) {
    for(int col = 0; col < sx; ++col)
      data[index + col] = packed;
    index += width;
  }
}

struct cpu_compute_t {
  cpu_compute_t(int num_threads, int width, int height);
  ~cpu_compute_t();

  void pool_execute();
  void thread_execute(int tid);
  bool pixel_execute(int x, int y, int sx, int sy);
  bool is_complete() const;
  void join();
  void update();

  static void thread_entry(cpu_compute_t* compute, int tid);

  std::vector<std::thread> threads;
  std::atomic<int> complete_count;
  std::atomic<bool> okay;

  int width, height;
  shadertoy_uniforms_t uniforms;
  int num_levels = 0;
  bool interlace = false;

  program_base_t* program;
  std::unique_ptr<software_fbo_t> fbo;
};

cpu_compute_t::cpu_compute_t(int num_threads, int width, int height) :
  width(width), height(height) {

  complete_count = num_threads;
  threads.resize(num_threads);
  okay = false;

  int width2 = (width + 7) & ~7;
  int height2 = (height + 7) & ~7;

  fbo = std::make_unique<software_fbo_t>(width2, height2);
}

cpu_compute_t::~cpu_compute_t() {
  join();
}

void cpu_compute_t::pool_execute() {
  okay = true;
  complete_count = 0;
  for(int tid = 0; tid < threads.size(); ++tid)
    threads[tid] = std::thread(thread_entry, this, tid);
}

void cpu_compute_t::thread_execute(int tid) {
  adam7_t adam7 { (width + 7) / 8, (height + 7) / 8 };

  auto f = [&](int x, int y, int sx, int sy) {
    return pixel_execute(x, y, sx, sy);
  };
  adam7.process(tid, threads.size(), num_levels, interlace, f);

  ++complete_count;
}

bool cpu_compute_t::pixel_execute(int x, int y, int sx, int sy) {
  // Immediately break if any setting has changed.
  if(!okay)
    return false;

  // Adjust to get the center of the pixel.
  float x2 = x + .5f;
  float y2 = y + .5f;

  vec4 color = program->eval(vec2(x2, y2), uniforms);
  fbo->set_block(color, x, y, sx, sy);

  return true;
}

bool cpu_compute_t::is_complete() const {
  return threads.size() == complete_count;
}

void cpu_compute_t::join() {
  okay = false;
  for(std::thread& t : threads)
    if(t.joinable())
      t.join();
}

void cpu_compute_t::thread_entry(cpu_compute_t* compute, int tid) {
  compute->thread_execute(tid);
}


////////////////////////////////////////////////////////////////////////////////

struct app_t {
  GLFWwindow* window = nullptr;
  GLuint vao = 0;
  GLuint array_buffer = 0;
  GLuint uniform_buffer = 0;

  // Indicate the current program being rendered.
  shader_program_t active_shader = { };

  shadertoy_uniforms_t uniforms;

  // Keep an instance of the current program.
  std::unique_ptr<program_base_t> program;

  float speed = 1;
  double time = 0;
  bool debug_on_click = false;
  bool render_cpu = false;
  bool interlace = false;
  bool asynchronous = true;
  int num_threads = 1;
  int num_levels = 1;
  std::unique_ptr<software_fbo_t> software_fbo;
  std::unique_ptr<cpu_compute_t> cpu_compute;

  app_t();
  void loop();
  void button_callback(int button, int action, int mods);

  bool configure();
  void set_active_shader(shader_program_t shader);

  void display_gpu();
  void display_cpu();

  // Fully compute one thread's contribution to the shader program.
  bool compute_cpu(int tid, int num_threads, int block_size);

  void framebuffer_callback(int width, int height);
  static void _framebuffer_callback(GLFWwindow* window, int width, int height);
  static void _button_callback(GLFWwindow* window, int button, int action, 
    int mods);

  static void _debug_callback(GLenum source, GLenum type, GLuint id, 
    GLenum severity, GLsizei length, const GLchar* message, 
    const void* user_param);
};

void app_t::framebuffer_callback(int width, int height) {
  glViewport(0, 0, width, height);
  cpu_compute.reset();
}

void app_t::_framebuffer_callback(GLFWwindow* window, int width, int height) {
  app_t* app = static_cast<app_t*>(glfwGetWindowUserPointer(window));
  app->framebuffer_callback(width, height);
}

void app_t::_button_callback(GLFWwindow* window, int button, int action,
  int mods) {
  app_t* app = static_cast<app_t*>(glfwGetWindowUserPointer(window));
  app->button_callback(button, action, mods);
}

void app_t::_debug_callback(GLenum source, GLenum type, GLuint id, 
  GLenum severity, GLsizei length, const GLchar* message, 
  const void* user_param) {

  if(GL_DEBUG_SEVERITY_HIGH == severity ||
    GL_DEBUG_SEVERITY_MEDIUM == severity)
    printf("OpenGL: %s\n", message);

  if(GL_DEBUG_SEVERITY_HIGH == severity)
    exit(1);
}

app_t::app_t() {
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6); 
  glfwWindowHint(GLFW_STENCIL_BITS, 8);
  glfwWindowHint(GLFW_DECORATED, GLFW_TRUE);

  window = glfwCreateWindow(1280, 720, "Circle does Shadertoy", 
    NULL, NULL);
  if(!window) {
    printf("Cannot create GLFW window\n");
    exit(1);
  }

  glEnable(GL_DEBUG_OUTPUT);
  glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
  glDebugMessageCallback(_debug_callback, this);

  glfwSetWindowUserPointer(window, this);
  glfwSetFramebufferSizeCallback(window, _framebuffer_callback);
  glfwSetMouseButtonCallback(window, _button_callback);

  glfwMakeContextCurrent(window);
  glfwSwapInterval(1);

  // Create an ImGui context.
  ImGui::CreateContext();
  ImGui_ImplGlfw_InitForOpenGL(window, true);
  ImGui_ImplOpenGL3_Init("#version 460");

  const float vertices[][2] { { -1, 1 }, { 1, 1 }, { -1, -1 }, { 1, -1 } };

  // Load into an array object.
  glCreateBuffers(1, &array_buffer);
  glNamedBufferStorage(array_buffer, sizeof(vertices), vertices, 0);

  // Declare a vertex array object and bind the array buffer.
  glGenVertexArrays(1, &vao);
  glBindVertexArray(vao);
  glBindBuffer(GL_ARRAY_BUFFER, array_buffer);

  // Bind to slot 0
  glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 0, 0);
  glEnableVertexAttribArray(0);

  // Allocate a shadertoy_uniform_t buffer.
  glCreateBuffers(1, &uniform_buffer);
  glNamedBufferStorage(uniform_buffer, sizeof(shadertoy_uniforms_t), nullptr,
    GL_DYNAMIC_STORAGE_BIT);

  // Choose the default shader.
  set_active_shader(shader_program_t { });

  uniforms.time = 0;
  uniforms.mouse = vec4(.5, .5, .5, .5);
}

void app_t::loop() {

  while(!glfwWindowShouldClose(window)) {
    glfwPollEvents();

    // Set the shadertoy uniforms.
    int width, height;
    glfwGetWindowSize(window, &width, &height);
    glViewport(0, 0, width, height);

    // Let ImGui have the mouse if the cursor is above its windows.
    ImGuiIO& io = ImGui::GetIO();
    bool has_mouse = !io.WantCaptureMouse &&
      GLFW_PRESS == glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT);
    if(has_mouse) {
      // Update mouse constant if pressed.
      double xpos, ypos;
      glfwGetCursorPos(window, &xpos, &ypos);

      float x = floor(xpos) + .5f;
      float y = height - floor(ypos) - .5f;

      uniforms.mouse.x = x;
      uniforms.mouse.y = y;
      if(uniforms.mouse.z < 0) {
        // The button was up the previous frame.
        uniforms.mouse.z = x;
        uniforms.mouse.w = y;
      }

    } else if(uniforms.mouse.z >= 0) {
      // The button was down the previous frame.
      // uniforms.mouse.zw *= -uniforms.mouse.xy;
      uniforms.mouse.z = -uniforms.mouse.x;
      uniforms.mouse.w = -uniforms.mouse.y;
    }

    uniforms.resolution = vec2(width, height);
    double new_time = glfwGetTime();
    uniforms.time += speed * (new_time - time);
    time = new_time; 

    // Start the Dear ImGui frame
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplGlfw_NewFrame();
    ImGui::NewFrame();

    // Configure the selected program...
    bool changed = configure();

    // Save the ImGui frame.
    ImGui::Render();

    if(render_cpu) {
      if(!cpu_compute || cpu_compute->threads.size() != num_threads) {
        // Create a new thread pool.
        cpu_compute = std::make_unique<cpu_compute_t>(num_threads, width,
          height);
        cpu_compute->program = program.get();
      }

      if(changed || cpu_compute->is_complete()) {
        // Either the shader settings have changed or we finished the frame.
        // Either way, update the settings and start again.
        cpu_compute->join();

        cpu_compute->fbo->update();
        cpu_compute->fbo->blit(cpu_compute->width, cpu_compute->height);

        cpu_compute->num_levels = num_levels;
        cpu_compute->interlace = interlace;
        cpu_compute->uniforms = uniforms;
        cpu_compute->pool_execute();

      } else if(asynchronous)
        cpu_compute->fbo->update();

      // Render what we have so far.
      cpu_compute->fbo->blit(cpu_compute->width, cpu_compute->height);

    } else {
      if(cpu_compute) {
        cpu_compute.reset();
      }

      // Bind the builtin shadertoy uniforms.
      glNamedBufferSubData(uniform_buffer, 0, sizeof(uniforms), &uniforms);
      glBindBufferBase(GL_UNIFORM_BUFFER, 0, uniform_buffer);

      // Bind and execute the input program.
      glUseProgram(program->program);
      glBindBufferBase(GL_UNIFORM_BUFFER, 1, program->ubo);

      glBindVertexArray(vao);

      glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
    }

    // Render the ImGui frame over the application.
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

    // Swap buffers.
    glfwSwapBuffers(window);
  }
}

void app_t::button_callback(int button, int action, int mods) {
  ImGuiIO& io = ImGui::GetIO();
  if(!io.WantCaptureMouse && GLFW_PRESS == action && 
    GLFW_MOUSE_BUTTON_LEFT == button) {

    // On the CPU, run the shader once on the click-on point.
    double x, y;
    glfwGetCursorPos(window, &x, &y);

    vec2 coord((float)x + .5f, uniforms.resolution.y - (float)y - .5f);
    shadertoy_uniforms_t u = uniforms;
    u.mouse = vec4(coord, coord);

    vec4 color = program->eval(coord, u, debug_on_click);

    printf("(%f, %f) -> (%f %f %f %f)\n", coord.x, coord.y,
      color.r, color.g, color.b, color.a);
  }
}

bool app_t::configure() {
  // Start by selecting the current program.
  // Produce a combo box with all shader options.
  ImGui::Begin("Shader parameters");

  ImGui::DragFloat("Time", &uniforms.time, .1);
  ImGui::SliderFloat("Speed", &speed, 0, 5);

  ImGui::Checkbox("Debug on click (run from GDB)", &debug_on_click);

  ImGui::Checkbox("Render on CPU", &render_cpu);

  bool changed = false;
  if(render_cpu) {
    changed |= ImGui::SliderInt("Thread pool size", &num_threads, 1, 32);
    changed |= ImGui::SliderInt("Detail levels", &num_levels, 1, 7);
    changed |= ImGui::Checkbox("Interlacing", &interlace);
    ImGui::Checkbox("Asynchronous", &asynchronous);
  }

  int current = (int)active_shader;
  const char* items[] { 
    @attribute(@enum_types(shader_program_t), imgui::title)... 
  }; 
  changed |= ImGui::Combo("Active shader", &current, items, items.length);

  if(current != (int)active_shader) {
    cpu_compute.reset();
    set_active_shader((shader_program_t)current);
  }

  program->configure(!render_cpu);
  ImGui::End();

  return changed;
}

void app_t::set_active_shader(shader_program_t shader) {
  // Generate a switch construct the requested shader program.
  switch(shader) {
    @meta for enum(shader_program_t e : shader_program_t) {
      case e: 
        program = std::make_unique<program_t<@enum_type(e)> >();
        glfwSetWindowTitle(window, @attribute(@enum_type(e), imgui::title));
        break;
    }
  }
  active_shader = shader;
}


////////////////////////////////////////////////////////////////////////////////


int main() {
  

  glfwInit();
  gl3wInit();
  
  app_t app;
  app.loop();

  return 0;
}
